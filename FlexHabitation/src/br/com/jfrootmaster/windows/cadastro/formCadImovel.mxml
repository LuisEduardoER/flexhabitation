<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="706" height="478"
	creationComplete="onInit()" styleName="TitleWindow" xmlns:ns1="br.com.jfrootmaster.custon.*" backgroundColor="#FFFFFF" backgroundAlpha="0.0">
	
	<!--Setando O Estilo da pagina -->
	<mx:Style source="assets/css/css.css"/>
	
	<!--Começando o escript de programação-->
	<mx:Script>
	
		<![CDATA[
			import br.com.jfrootmaster.modelo.email.emailModelo;
			import br.com.jfrootmaster.modelo.Cadastro.CadImoveisModelo;
			import br.com.jfrootmaster.modelo.Cadastro.CadUsuarioModelo;
			import br.com.jfrootmaster.modelo.Cadastro.CadStatusUsuarioModelo;
			import flash.utils.getTimer;
		
			//Import's
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import framework.MKGBController;
			import mx.managers.PopUpManager;
			import mx.skins.Border;
			import br.com.jfrootmaster.custon.TextImputCustom;
			import mx.controls.ComboBox;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import br.com.jfrootmaster.dataprovider.RepositorioDataProviders;
			import br.com.jfrootmaster.custon.TextAreaCustom;
			
			//Variaveis
			private var _cont:MKGBController;
			private var date:Date = new Date();

			[Bindable]
			private var dataSet:ArrayCollection;
			
			[Bindable]
			private var _dados:RepositorioDataProviders =  RepositorioDataProviders.getInstance();
			
			[Bindable]
			private var CepEncontrado:ArrayCollection;
			
			[Bindable]
			private var listaImoveis:ArrayCollection;
			
////////////////////////////Inicio das Funções/////////////////////////////////
			
		//Função Inicial
		private function onInit():void{
			dataSet = new ArrayCollection;
			_cont = new MKGBController();  
			clearForm(CanvasForm1);
			clearForm(CanvasForm2);
			clearForm(CanvasForm3);  
			tnUser.enabled = false;
			onClickNovo(); 
			
			this.addEventListener("onEditar",onEditar);
			this.addEventListener("onExcluir",onExcluir);
			
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadImoveisListar", [], onAfterCadImoveisListar,this, "StatusUser",true);
				
		}
		
		private function onAfterCadImoveisListar(e:ResultEvent):void{
			listaImoveis = e.result as ArrayCollection;
		}
			
		//Função para limpar os campos do formulario
		private function clearForm(obj:Object):void{
			var i:int;
			for (i = 0; i < obj.numChildren; i ++){
				var objeto:Object =  obj.getChildAt(i);
				if(obj.getChildAt(i) is TextImputCustom){
					obj.getChildAt(i).text = "";
					obj.getChildAt(i).setStyle("borderColor","#b7babc");
					obj.getChildAt(i).setStyle("border","inset");
			  	}
			  	if(obj.getChildAt(i) is ComboBox){
			  		obj.getChildAt(i).selectedIndex = -1
			  		obj.getChildAt(i).setStyle("borderColor","#b7babc");
			  	}
			  	if(obj.getChildAt(i) is TextAreaCustom){
			  		obj.getChildAt(i).text = ""
			  		obj.getChildAt(i).setStyle("borderColor","#b7babc");
			  		obj.getChildAt(i).setStyle("border","inset");
			  	}
		   	  }
		   	  	tnUser.enabled         = true;  
		   	  	btnNovo.enabled        = true;  
				btnSalvar.enabled      = false;   
				btnCancelar.enabled    = false;  
				btnBuscar.enabled      = true;            
				lbInfo.text            = "";       
				lbInfo.setStyle("color" , "Black");
		}
			
		//Função que Valida os campos obrigatorios
		private function validate(obj:Object):void{
			var i:int;
			var i2:int;
			var camposvazios:int = 0;
			for (i = 0; i < obj.numChildren; i ++){
				var objeto:Object =  obj.getChildAt(i);
			for (i2 = 0;i2 < objeto.numChildren; i2 ++){
				if(objeto.getChildAt(i2) is TextImputCustom){
					if (objeto.getChildAt(i2).Requerido == true && objeto.getChildAt(i2).text == '') {
						validation(objeto.getChildAt(i2)); //aciona validation para exibir a mensagem de alerta ao usuario.
						objeto.getChildAt(i2).setStyle("borderColor","Red"); //seta o estilo dos campos obrigatorios vazios.
						camposvazios ++; //conta os campos requeridos vazios.
					}else{
						objeto.getChildAt(i2).setStyle("borderColor","#b7babc"); //seta o estilo dos campos obrigatorios nao preenchidos. 
						objeto.getChildAt(i2).setStyle("border","inset");
					}
					
			  	}else if(objeto.getChildAt(i2) is ComBoxCustom){
					if (objeto.getChildAt(i2).Requerido == true && objeto.getChildAt(i2).selectedIndex == -1) {
						validation(objeto.getChildAt(i2)); //aciona validation para exibir a mensagem de alerta ao usuario.
						objeto.getChildAt(i2).setStyle("borderColor","Red"); //seta o estilo dos campos obrigatorios vazios.
						camposvazios ++; //conta os campos requeridos vazios.
					}else{
						objeto.getChildAt(i2).setStyle("borderColor","#b7babc"); //seta o estilo dos campos obrigatorios nao preenchidos. 
						objeto.getChildAt(i2).setStyle("border","inset");
					}
		   		}
		   	}
		}
		   	if(camposvazios == 0){ //quando nao tiver mais campos obrigatorios vazios.
		   		insertOrUpdate();  //aciona insertorupdate para verificar se vai inserir ou fazer um update no banco.
		   	}
		}
		
		//Função aonde retorna alert ou mensagem com o nome do campo requerido que ficou em branco.
		//OBS no caso nao estamos usando pq estamos colocando o campo requerido e nao preenchido com a borda em vermelho.
		private function validation(campo:Object):void {
			/* var strNomeCampo:String;
			strNomeCampo = campo.NomeCampo;
			campo.setFocus(); */ 
			
			lbInfo.setStyle("color" , "Red"); //seta estilo do label.
			lbInfo.text = "O campo em vermelho não pode ficar vazio."; //exibe mensagem ao usuario.
		}
		
		//Função para verificar se insere ou altera os itens do banco
		private function insertOrUpdate():void{
			if(dataGrid.selectedIndex > -1){ //se o datagrid estiver selecionado entao chama a funçao de update.
				onUpdate(); //chama a função de update.
			}else{
				onInsert(); //chama a função de insert.
		   	}
		}
		
		//Função que insere os itens no banco	
		private function onInsert():void{
			var cim:CadImoveisModelo        = new CadImoveisModelo();
				cim.area_construida			= tiAreaConstruida.text;		
				cim.area_servico			= ckAreaServico.valor;
				cim.area_terreno			= tiAreaTerreno.text;
				cim.area_util				= tiAreaUtil.text;
				cim.bairro					= tiBairro.text;
				cim.churrasqueira			= ckChurrasqueira.valor;
				cim.cidade					= tiCidade.text;
				cim.complemento				= tiComplemento.text;
				cim.cond_pgto				= tiCondPagamento.text;
				cim.copa					= ckCopa.valor;
				cim.cozinha					= ckCozinha.valor;
				cim.data_cadastro			= new Date();
				cim.dep_empregada			= ckDepEmpregada.valor;	
				cim.email_contato			= tiEmailContato.text;
				cim.endereco				= tiRua.text;
				cim.estado					= tiEstado.text;
				cim.finalidade				= cmbFinalidade.selectedItem.tipo;
				cim.financiado				= ckFinanciado.valor;
				//cim.garagem				= 
				cim.num_dormitorios 		= Number(tiDomitorios.text);
				cim.num_suites				= Number(tiSuites.text);
				cim.num_vagas_garagem		= Number(tiGaragem.text);
				cim.numero					= tiNumero.text;
				cim.objetivo				= cmbObjetivo.selectedItem.tipo;
				cim.observacao				= tiObservacao.text;
				cim.permite_placa			= ckPermitePlaca.valor;
				cim.pscina					= ckPscina.valor;
				cim.sala_estar				= ckSalaEstar.valor;
				cim.sala_jantar				= ckSalaJantar.valor;
				cim.sala_tv					= ckSalaTv.valor;
				cim.tipo_imovel				= cmbTipoImovel.selectedItem.tipo;
				cim.topografia				= cmbTopografia.selectedItem.tipo;
				cim.valor_condominio		= Number(tiValorCondominio.text);
				cim.valor_iptu				= Number(tiValorIptu.text); 
				cim.valor_locacao			= Number(tiValorLocacao.text);
				cim.valor_venda				= Number(tiValorVenda.text);
				
				//insere items no banco
				_cont.destinationAlternativo = "Cadastro";
				_cont.executeLocal("CadImoveisIncluir", [cim], onAfterInserir,this, "dataSet",true);
		}
		
		//Função result do insert	
		private function onAfterInserir(e:ResultEvent):void{
			tiId.text = e.result.id_imovel;
			lbInfo.setStyle("color" , "Black"); //seta estilo do label.
			lbInfo.text = "Item Inserido com sucesso!"; // exibe mensagem ao usuario.
			
			btnNovo.enabled 		= true;
			btnSalvar.enabled 		= false;
			btnCancelar.enabled 	= true;
			btnBuscar.enabled 		= true;
		}
		
		//Função que altera os itens no banco	
		private function onUpdate():void{
			var cim:CadImoveisModelo        = new CadImoveisModelo();
				cim.area_construida			= tiAreaConstruida.text;		
				cim.area_servico			= ckAreaServico.valor;
				cim.area_terreno			= tiAreaTerreno.text;
				cim.area_util				= tiAreaUtil.text;
				cim.bairro					= tiBairro.text;
				cim.churrasqueira			= ckChurrasqueira.valor;
				cim.cidade					= tiCidade.text;
				cim.complemento				= tiComplemento.text;
				cim.cond_pgto				= tiCondPagamento.text;
				cim.copa					= ckCopa.valor;
				cim.cozinha					= ckCozinha.valor;
				cim.data_cadastro			= new Date();
				cim.dep_empregada			= ckDepEmpregada.valor;	
				cim.email_contato			= tiEmailContato.text;
				cim.endereco				= tiRua.text;
				cim.estado					= tiEstado.text;
				cim.finalidade				= cmbFinalidade.selectedItem.tipo;
				cim.financiado				= ckFinanciado.valor;
				//cim.garagem				= 
				cim.num_dormitorios 		= Number(tiDomitorios.text);
				cim.num_suites				= Number(tiSuites.text);
				cim.num_vagas_garagem		= Number(tiGaragem.text);
				cim.numero					= tiNumero.text;
				cim.objetivo				= cmbObjetivo.selectedItem.tipo;
				cim.observacao				= tiObservacao.text;
				cim.permite_placa			= ckPermitePlaca.valor;
				cim.pscina					= ckPscina.valor;
				cim.sala_estar				= ckSalaEstar.valor;
				cim.sala_jantar				= ckSalaJantar.valor;
				cim.sala_tv					= ckSalaTv.valor;
				cim.tipo_imovel				= cmbTipoImovel.selectedItem.tipo;
				cim.topografia				= cmbTopografia.selectedItem.tipo;
				cim.valor_condominio		= Number(tiValorCondominio.text);
				cim.valor_iptu				= Number(tiValorIptu.text); 
				cim.valor_locacao			= Number(tiValorLocacao.text);
				cim.valor_venda				= Number(tiValorVenda.text);
				
				//Função update dos itens no Banco
				_cont.destinationAlternativo = "Cadastro";
				_cont.executeLocal("CadImoveisAlterar", [cim], onAfterUpdate,this, "dataSet",true);			
		}
		
		private function onAfterUpdate(e:ResultEvent):void{
			btnNovo.enabled 		= true;
			btnSalvar.enabled 		= false;
			btnCancelar.enabled 	= true;
			btnBuscar.enabled 		= true;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text = "Alteração Efetuada Com Sucesso!";
			
			//lista depois da alteração
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadImoveisListar",[],onAfterListar,this,"dataSet",true);
		}
			
		
		//Função listar itens do banco	
		private function onlist():void{
			/* CanvasForm.visible          = false;
			CanvasForm.includeInLayout  = false; */
			tnUser.visible          = false;
			tnUser.includeInLayout  = false;
			
			CanvasDg.visible          	= true;
			CanvasDg.includeInLayout  	= true;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text = "";
			
			btnNovo.enabled 			= true;
			btnSalvar.enabled 			= false;
			btnCancelar.enabled 		= false;
			btnBuscar.enabled 			= false;
			
			//Executa busca no Banco
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadImoveisListar",[],onAfterListar,this,"dataSet",true);
		}
			
		private function onAfterListar(e:ResultEvent):void{
			dataSet = e.result as ArrayCollection;
		}
			
		private function onEditar(e:Event):void {
			if(dataGrid.selectedItem != null){
				lbInfo.setStyle("color" , "Black");
				lbInfo.text = "";
				
				/* CanvasForm.enabled 			= true;
				CanvasForm.visible          = true;
				CanvasForm.includeInLayout  = true; */
				tnUser.enabled 			= true;
				tnUser.visible          = true;
				tnUser.includeInLayout  = true;
			
				CanvasDg.visible          	= false;
				CanvasDg.includeInLayout  	= false;
				
				btnNovo.enabled 			= false;
				btnSalvar.enabled 			= true;
				btnCancelar.enabled 		= true;
				btnBuscar.enabled 			= false;
			
				//preenche os campos com os dados vindos do datagrid
				tiAreaConstruida.text 	= String(dataGrid.selectedItem.area_construida);		
				ckAreaServico.setarValor(dataGrid.selectedItem.area_servico);
				tiAreaTerreno.text    	= String(dataGrid.selectedItem.area_terreno);
				tiAreaUtil.text			= String(dataGrid.selectedItem.area_util);	
				tiBairro.text			= dataGrid.selectedItem.bairro;
				ckChurrasqueira.setarValor(dataGrid.selectedItem.churrasqueira);
				tiCidade.text			= dataGrid.selectedItem.cidade;
				tiComplemento.text		= dataGrid.selectedItem.complemento;
				tiCondPagamento.text	= dataGrid.selectedItem.cond_pgto;
				ckCopa.setarValor(dataGrid.selectedItem.copa);	
				ckCozinha.setarValor(dataGrid.selectedItem.cozinha);
				ckDepEmpregada.setarValor(dataGrid.selectedItem.dep_empregada);
				tiEmailContato.text 	= dataGrid.selectedItem.email_contato;
				tiRua.text				= dataGrid.selectedItem.endereco;
				tiEstado.text			= dataGrid.selectedItem.estado;		
				cmbFinalidade.selecionarItemDoCombo(dataGrid.selectedItem.finalidade);
				ckFinanciado.setarValor(dataGrid.selectedItem.financiado);
				tiDomitorios.text       = String(dataGrid.selectedItem.num_dormitorios);
				tiSuites.text			= String(dataGrid.selectedItem.num_suites);
				tiGaragem.text			= String(dataGrid.selectedItem.num_vagas_garagem);
				tiNumero.text			= dataGrid.selectedItem.numero;
				cmbObjetivo.selecionarItemDoCombo(dataGrid.selectedItem.objetivo);
				tiObservacao.text		= dataGrid.selectedItem.observacao;
				ckPermitePlaca.setarValor(dataGrid.selectedItem.permite_placa);
				ckPscina.setarValor(dataGrid.selectedItem.pscina);
				ckSalaEstar.setarValor(dataGrid.selectedItem.sala_estar);
				ckSalaJantar.setarValor(dataGrid.selectedItem.sala_jantar);
				ckSalaTv.setarValor(dataGrid.selectedItem.sala_tv);
				cmbTipoImovel.selecionarItemDoCombo(dataGrid.selectedItem.tipo_imovel);
				cmbTopografia.selecionarItemDoCombo(dataGrid.selectedItem.topografia);
				tiValorCondominio.text  = String(dataGrid.selectedItem.valor_condominio);
				tiValorIptu.text 		= String(dataGrid.selectedItem.valor_iptu);
				tiValorLocacao.text		= String(dataGrid.selectedItem.valor_locacao);
				tiValorVenda.text		= String(dataGrid.selectedItem.valor_venda);
				
			}else{
				lbInfo.setStyle("color" , "Red");
				lbInfo.text = "Favor Selecionar Um Registro Para Editar";
			}
		}
			
			
			
		private function onExcluir(e:Event):void {
			if(dataGrid.selectedItem != null){
				lbInfo.setStyle("color" , "Black");
				lbInfo.text = "";
				
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";
				Alert.show("Confirma exclusão definitiva?","Exclusão", Alert.YES | Alert.NO ,this, resultExcluir);
			}else{
				lbInfo.setStyle("color" , "Red");
				lbInfo.text = "Favor Selecionar Um Registro Para Excluir";
			}
		}
		
		public function resultExcluir(event:CloseEvent):void{
			if (event.detail == Alert.YES){
				//executa exclusao no banco
				_cont.destinationAlternativo = "Cadastro";
				_cont.executeLocal("CadImoveisExcluir",[dataGrid.selectedItem.id_imovel],onAfterExcluir,this,"dataSet",true);
			}
		}
			
		private function onAfterExcluir(e:ResultEvent):void{
			//lista depois de excluir
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadImovelListar",[],onAfterListar,this,"dataSet",true);
		}
		
		//Função novo registro
		private function onClickNovo():void {
			clearForm(CanvasForm1);
			clearForm(CanvasForm2);
			clearForm(CanvasForm3); 
			dataGrid.selectedIndex      = -1;
			
			/* CanvasForm.enabled          = true;
			CanvasForm.visible          = true;
			CanvasForm.includeInLayout  = true; */
			
			tnUser.enabled          = true;
			tnUser.visible          = true;
			tnUser.includeInLayout  = true; 
			
			CanvasDg.visible            = false;
			CanvasDg.includeInLayout    = false;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text                 = "";
			
			btnNovo.enabled 			= false;
			btnSalvar.enabled 			= true;
			btnCancelar.enabled 		= true;
			btnBuscar.enabled 			= false;
		}
		
		private function onClickSave():void{
			validate(tnUser);
			/* validate(CanvasForm2);
			validate(CanvasForm3); */
		}
		
		private function onClickCancel():void{
			clearForm(CanvasForm1);
			clearForm(CanvasForm2);
			clearForm(CanvasForm3);
		}
		
		private function onLocalizaCep():void{
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadCepLocalizar",[tiCep.text],onAfterCadCepLocalizar,this,"CepEncontrado",true);
		}
		
		private function onAfterCadCepLocalizar(e:ResultEvent):void{
			tiRua.text = e.result[0].logradouro + " " + e.result[0].rua;
			tiCidade.text  = e.result[0].cidade;
			tiEstado.text  = e.result[0].estado;
			tiPais.text  = e.result[0].pais;
			tiBairro.text  = e.result[0].bairro;
		}
			
		]]>
	</mx:Script>
	<mx:DateFormatter id="_dfFormatador" formatString="DD/MM/YYYY J:NN:SS"  />
	
	<mx:HBox height="64" left="10" right="10" top="10">
		<mx:Button id="btnNovo" label="Novo" height="100%" width="75" click="onClickNovo()" labelPlacement="bottom"/>
		<mx:Button id="btnSalvar" label="Salvar" height="100%" click="onClickSave()" labelPlacement="bottom" width="75"/>
		<mx:Button id="btnCancelar" label="Cancelar" height="100%" click="onClickCancel()" labelPlacement="bottom" width="75"/>
		<mx:Button id="btnBuscar" label="Buscar" height="100%" click="onlist()" labelPlacement="bottom" width="75"/>
	</mx:HBox>
	<mx:Canvas id="CanvasDg" x="0" y="73" width="100%" height="310" visible="false" top="82" left="0" bottom="29" styleName="DataGrid">
		<mx:DataGrid id="dataGrid" dataProvider="{this.dataSet}" y="0" height="100%" right="10" left="10"
			doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn headerText="ID" dataField="id_usuario" width="50"/>
				<mx:DataGridColumn headerText="Nome" dataField="nome" width="150"/>
				<mx:DataGridColumn headerText="Nick" dataField="nick"/>
				<mx:DataGridColumn headerText="##" width="35" itemRenderer="br.com.jfrootmaster.itemrenderers.IrEditar"/>
				<mx:DataGridColumn headerText="##" width="35" itemRenderer="br.com.jfrootmaster.itemrenderers.IrExcluir"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:Canvas height="21" right="10" left="10" borderStyle="solid" borderColor="#000000" cornerRadius="6" bottom="5">
		<mx:Label id="lbInfo" text="Info" textAlign="center" fontWeight="bold" fontSize="11" height="100%" bottom="0" left="0" right="0"/>
	</mx:Canvas>
	<mx:TabNavigator right="10" bottom="29" top="82" left="10" backgroundAlpha="0.0" id="tnUser" color="#FFFFFF" cornerRadius="8" borderColor="#000000" backgroundColor="#A7A4A4">
		<mx:Canvas label="Dados Imovel" width="100%" height="100%" backgroundAlpha="1.0" alpha="1.0" id="CanvasForm1">
			<ns1:TextImputCustom x="10" y="29" width="89" editable="false" id="tiId" color="#000000"/>
			<mx:Label x="10" y="10" text="ID" fontWeight="bold"/>
			<mx:Label x="10" y="63" text="Tipo Imovel" fontWeight="bold"/>
			<ns1:TextImputCustom x="10" y="128" width="97" id="tiAreaTerreno" Requerido="true" color="#000000"/>
			<ns1:TextImputCustom x="115" y="128" width="97" id="tiAreaConstruida" Requerido="true" color="#000000"/>
			<mx:Label x="115" y="110" text="Area Construida" fontWeight="bold"/>
			<ns1:TextImputCustom x="220" y="128" width="97" id="tiAreaUtil" Requerido="true" color="#000000"/>
			<mx:Label x="220" y="110" text="Area Util" fontWeight="bold"/>
			<mx:Label x="10" y="110" text="Area do Terreno" fontWeight="bold"/>
			<ns1:TextImputCustom x="10" y="176" width="73" id="tiDomitorios" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="158" text="Dormitorios" fontWeight="bold"/>
			<mx:Label x="10" y="257" text="Observação" fontWeight="bold"/>
			<ns1:TextImputCustom x="91" y="176" width="73" id="tiSuites" Requerido="true" color="#000000"/>
			<mx:Label x="91" y="158" text="Suites" fontWeight="bold"/>
			<ns1:TextImputCustom x="172" y="176" width="73" id="tiGaragem" Requerido="true" color="#000000"/>
			<mx:Label x="172" y="158" text="Garagem" fontWeight="bold"/>
			<ns1:ComBoxCustom x="10" y="80" width="286" id="cmbTipoImovel" dataProvider="{_dados.tipoImoveis}" labelField="tipo" ComboKey="tipo" color="#000000"
				prompt="Selecione o Tipo do Imovel"></ns1:ComBoxCustom>
			<mx:Label x="304" y="63" text="Finalidade" fontWeight="bold"/>
			<ns1:ComBoxCustom x="304" y="80" width="286" id="cmbFinalidade" dataProvider="{_dados.finalidadeImovel}" labelField="tipo" ComboKey="tipo" color="#000000"
				prompt="Selecione a Finalidade do Imovel"></ns1:ComBoxCustom>
			<mx:Label x="325" y="110" text="Topografia" fontWeight="bold"/>
			<ns1:ComBoxCustom x="325" y="127" width="265" id="cmbTopografia" dataProvider="{_dados.topografiaTerreno}" labelField="tipo" ComboKey="tipo" color="#000000"
				prompt="Selecione a Topografia do Terreno"></ns1:ComBoxCustom>
			<ns1:CheckBoxCustom x="10" y="206" label="Sala de Estar" width="122" fontWeight="bold" id="ckSalaEstar"/>
			<ns1:CheckBoxCustom x="455" y="206" label="Dep Empregada" width="122" fontWeight="bold" id="ckDepEmpregada"/>
			<ns1:CheckBoxCustom x="123" y="206" label="Copa" width="122" fontWeight="bold" id="ckCopa"/>
			<ns1:CheckBoxCustom x="123" y="227" label="Cozinha" width="122" fontWeight="bold" id="ckCozinha"/>
			<ns1:CheckBoxCustom x="220" y="227" label="Area de Serviço" width="122" fontWeight="bold" id="ckAreaServico"/>
			<ns1:CheckBoxCustom x="338" y="206" label="Churrasqueira" width="122" fontWeight="bold" id="ckChurrasqueira"/>
			<ns1:CheckBoxCustom x="338" y="227" label="Pscina" width="122" fontWeight="bold" id="ckPscina"/>
			<ns1:CheckBoxCustom x="220" y="206" label="Sala de Tv" width="122" fontWeight="bold" id="ckSalaTv"/>
			<ns1:CheckBoxCustom x="10" y="227" label="Sala de Jantar" width="122" fontWeight="bold" id="ckSalaJantar"/>
			<ns1:TextAreaCustom x="10" y="275" width="580" id="tiObservacao"/>
		</mx:Canvas>
		<mx:Canvas label="Localização" width="100%" height="100%" id="CanvasForm2">
			<ns1:TextImputCustom x="10" y="67" width="570" id="tiRua" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="49" text="Rua" fontWeight="bold" />
			<ns1:TextImputCustom x="10" y="18" width="155" id="tiCep" Requerido="true" color="#000000"/>
			<ns1:TextImputCustom x="10" y="115" width="186" id="tiBairro" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="97" text="Bairro" fontWeight="bold"/>
			<ns1:TextImputCustom x="204" y="115" width="307" id="tiCidade" Requerido="true" color="#000000"/>
			<mx:Label x="204" y="97" text="Cidade" fontWeight="bold"/>
			<ns1:TextImputCustom x="10" y="163" width="44" id="tiEstado" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="145" text="Estado" fontWeight="bold"/>
			<ns1:TextImputCustom x="62" y="163" width="193" id="tiPais" Requerido="true" color="#000000"/>
			<mx:Label x="62" y="145" text="Pais" fontWeight="bold"/>
			<mx:Label x="10" y="0" text="CEP" fontWeight="bold" />
			<ns1:TextImputCustom x="588" y="67" width="86" id="tiNumero" Requerido="true" color="#000000"/>
			<mx:Label x="588" y="49" text="Numero" fontWeight="bold"/>
			<mx:Button x="173" y="18" label="Localizar" click="onLocalizaCep()"/>
			<ns1:TextImputCustom x="10" y="211" width="570" id="tiComplemento" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="193" text="Complemento" fontWeight="bold"/>
		</mx:Canvas>
		<mx:Canvas label="Venda / Locação" width="100%" height="100%" id="CanvasForm3">
			<ns1:TextImputCustom x="10" y="75" width="122" id="tiValorVenda" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="57" text="Valor Venda" fontWeight="bold"/>
			<ns1:TextImputCustom x="10" y="123" width="512" id="tiCondPagamento" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="105" text="Cond Pagamento" fontWeight="bold"/>
			<ns1:TextImputCustom x="140" y="75" width="122" id="tiValorLocacao" Requerido="true" color="#000000"/>
			<mx:Label x="140" y="57" text="Valor Locação" fontWeight="bold"/>
			<ns1:TextImputCustom x="270" y="75" width="122" id="tiValorCondominio" Requerido="true" color="#000000"/>
			<mx:Label x="270" y="57" text="Valor Condominio" fontWeight="bold"/>
			<ns1:TextImputCustom x="400" y="75" width="122" id="tiValorIptu" Requerido="true" color="#000000"/>
			<mx:Label x="400" y="57" text="Valor IPTU" fontWeight="bold"/>
			<ns1:CheckBoxCustom x="125" y="153" label="Permite Placa" width="122" fontWeight="bold" id="ckPermitePlaca"/>
			<ns1:CheckBoxCustom x="10" y="153" label="Financiado" width="122" fontWeight="bold" id="ckFinanciado"/>
			<mx:Label x="10" y="10" text="Objetivo" fontWeight="bold"/>
			<ns1:ComBoxCustom x="10" y="27" width="286" id="cmbObjetivo" dataProvider="{_dados.objetivo}" labelField="tipo" ComboKey="tipo" color="#000000"
				prompt="Selecione o Objetivo"></ns1:ComBoxCustom>
			<ns1:TextImputCustom x="10" y="201" width="252" id="tiEmailContato" Requerido="true" color="#000000"/>
			<mx:Label x="10" y="183" text="Email Contato" fontWeight="bold"/>
		</mx:Canvas>
	</mx:TabNavigator>
	
</mx:Canvas>
