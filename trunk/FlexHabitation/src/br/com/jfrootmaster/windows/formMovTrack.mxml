<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="706" height="478"
	creationComplete="onInit()" styleName="TitleWindow" xmlns:ns1="br.com.jfrootmaster.custon.*">
	
	<!--Setando O Estilo da pagina -->
	<mx:Style source="assets/css/css.css"/>
	
	<!--Começando o escript de programação-->
	<mx:Script>
	
		<![CDATA[
			import br.com.jfrootmaster.modelo.Movimentacao.MovTrackModelo;
			import flash.utils.getTimer;
		
			//Import's
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import framework.MKGBController;
			import mx.managers.PopUpManager;
			import mx.skins.Border;
			import br.com.jfrootmaster.custon.TextImputCustom;
			import mx.controls.ComboBox;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import br.com.jfrootmaster.dataprovider.RepositorioDataProviders;
			import br.com.jfrootmaster.custon.TextAreaCustom;
			
			//Variaveis
			private var _cont:MKGBController;
			private var date:Date = new Date();

			[Bindable]
			private var dataSet:ArrayCollection;
			
			[Bindable]
			private var CadTarefa:ArrayCollection;
			
			[Bindable]
			private var CadUser:ArrayCollection;
			
			[Bindable]
			private var CadPrioridade:ArrayCollection;
			
			
////////////////////////////Inicio das Funções/////////////////////////////////
			
		//Função Inicial
		private function onInit():void{
			dataSet = new ArrayCollection;
			_cont = new MKGBController();  
			clearForm(CanvasForm);
			CanvasForm.enabled = false; 
			onClickNovo();
			
			this.addEventListener("onEditar",onEditar);
			this.addEventListener("onExcluir",onExcluir);
			
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadTarefaListar", [], onAfterCadTaskListar,this, "CadTarefa",true);
				
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadUsuarioListar", [], onAfterCadUserListar,this, "CadUser",true);
			
			_cont.destinationAlternativo = "Cadastro";
			_cont.executeLocal("CadPrioridadeListar", [], onAfterCadPriorityListar,this, "CadPrioridade",true);
		}
		
		private function onAfterCadUserListar(e:ResultEvent):void{
			CadUser = e.result as ArrayCollection;
		}
		
		private function onAfterCadTaskListar(e:ResultEvent):void{
			CadTarefa = e.result as ArrayCollection;
		}
		
		private function onAfterCadPriorityListar(e:ResultEvent):void{
			CadPrioridade = e.result as ArrayCollection;
		}
			
		//Função para limpar os campos do formulario
		private function clearForm(obj:Object):void{
			var i:int;
			for (i = 0; i < obj.numChildren; i ++){
				var objeto:Object =  obj.getChildAt(i);
				if(obj.getChildAt(i) is TextImputCustom){
					obj.getChildAt(i).text = "";
					obj.getChildAt(i).setStyle("borderColor","#b7babc");
					obj.getChildAt(i).setStyle("border","inset");
			  	}
			  	if(obj.getChildAt(i) is ComboBox){
			  		obj.getChildAt(i).selectedIndex = -1
			  		obj.getChildAt(i).setStyle("borderColor","#b7babc");
			  	}
			  	if(obj.getChildAt(i) is TextAreaCustom){
			  		obj.getChildAt(i).text = ""
			  		obj.getChildAt(i).setStyle("borderColor","#b7babc");
			  		obj.getChildAt(i).setStyle("border","inset");
			  	}
		   	  }
		   	  	CanvasForm.enabled         = true;  
		   	  	btnNovo.enabled        = true;  
				btnSalvar.enabled      = false;   
				btnCancelar.enabled    = false;  
				btnBuscar.enabled      = true;         
				lbInfo.text            = "";       
				lbInfo.setStyle("color" , "Black");
		}
			
		//Função que Valida os campos obrigatorios
		private function validate(obj:Object):void{
			var i:int;
			var i2:int;
			var camposvazios:int = 0;
			for (i = 0; i < obj.numChildren; i ++){
				var objeto:Object =  obj.getChildAt(i);
			for (i2 = 0;i2 < objeto.numChildren; i2 ++){
				if(objeto.getChildAt(i2) is TextImputCustom){
					if (objeto.getChildAt(i2).Requerido == true && objeto.getChildAt(i2).text == '') {
						validation(objeto.getChildAt(i2)); //aciona validation para exibir a mensagem de alerta ao usuario.
						objeto.getChildAt(i2).setStyle("borderColor","Red"); //seta o estilo dos campos obrigatorios vazios.
						camposvazios ++; //conta os campos requeridos vazios.
					}else{
						objeto.getChildAt(i2).setStyle("borderColor","#b7babc"); //seta o estilo dos campos obrigatorios nao preenchidos. 
						objeto.getChildAt(i2).setStyle("border","inset");
					}
					
			  	}else if(objeto.getChildAt(i2) is ComBoxCustom){
					if (objeto.getChildAt(i2).Requerido == true && objeto.getChildAt(i2).selectedIndex == -1) {
						validation(objeto.getChildAt(i2)); //aciona validation para exibir a mensagem de alerta ao usuario.
						objeto.getChildAt(i2).setStyle("borderColor","Red"); //seta o estilo dos campos obrigatorios vazios.
						camposvazios ++; //conta os campos requeridos vazios.
					}else{
						objeto.getChildAt(i2).setStyle("borderColor","#b7babc"); //seta o estilo dos campos obrigatorios nao preenchidos. 
						objeto.getChildAt(i2).setStyle("border","inset");
					}
		   		}
		   	}
		}
		   	if(camposvazios == 0){ //quando nao tiver mais campos obrigatorios vazios.
		   		insertOrUpdate();  //aciona insertorupdate para verificar se vai inserir ou fazer um update no banco.
		   	}
		}
		
		//Função aonde retorna alert ou mensagem com o nome do campo requerido que ficou em branco.
		//OBS no caso nao estamos usando pq estamos colocando o campo requerido e nao preenchido com a borda em vermelho.
		private function validation(campo:Object):void {
			/* var strNomeCampo:String;
			strNomeCampo = campo.NomeCampo;
			campo.setFocus(); */ 
			
			lbInfo.setStyle("color" , "Red"); //seta estilo do label.
			lbInfo.text = "O campo em vermelho não pode ficar vazio."; //exibe mensagem ao usuario.
		}
		
		//Função para verificar se insere ou altera os itens do banco
		private function insertOrUpdate():void{
			if(dataGrid.selectedIndex > -1){ //se o datagrid estiver selecionado entao chama a funçao de update.
				onUpdate(); //chama a função de update.
			}else{
				onInsert(); //chama a função de insert.
		   	}
		}
		
		//Função que insere os itens no banco	
		private function onInsert():void{
			var tm:MovTrackModelo 	        = new MovTrackModelo();
				tm.data 	                = new Date();
				tm.id_status_track    		= 1;
				tm.id_usuario				= 1; //** aprimortar quando o login for criado **//
				tm.id_prioridade			= cmbPrioridade.selectedItem.id_prioridade;
				tm.id_tarefa			    = cmbTarefa.selectedItem.id_tarefa;
				tm.id_usuario_destino		= cmbUsuarioDestino.selectedItem.id_usuario;
				tm.titulo_track				= tiTituloTarefa.text;
				tm.track					= taTarefa.text;
					
				
				//insere items no banco
				_cont.destinationAlternativo = "Movimentacao";
				_cont.executeLocal("MovTrackIncluir", [tm], onAfterInserir,this, "dataSet",true);
		}
		
		//Função result do insert	
		private function onAfterInserir(e:ResultEvent):void{
			tiId.text = e.result.id_track;
			lbInfo.setStyle("color" , "Black"); //seta estilo do label.
			lbInfo.text = "Item Inserido com sucesso!"; // exibe mensagem ao usuario.
			
			btnNovo.enabled 		= true;
			btnSalvar.enabled 		= false;
			btnCancelar.enabled 	= true;
			btnBuscar.enabled 		= true;
		}
		
		//Função que altera os itens no banco	
		private function onUpdate():void{
			var tm:MovTrackModelo           = new MovTrackModelo();
				tm 					        = MovTrackModelo(dataGrid.selectedItem);
				tm.id_status_track    		= 1;
				tm.id_usuario				= 1; //** aprimortar quando o login for criado **//
				tm.id_prioridade		    = cmbPrioridade.selectedItem.id_prioridade;
				tm.id_tarefa			    = cmbTarefa.selectedItem.id_tarefa;
				tm.id_usuario_destino		= cmbUsuarioDestino.selectedItem.id_usuario;
				tm.titulo_track				= tiTituloTarefa.text;
				tm.track					= taTarefa.text;
				
				//Função update dos itens no Banco
				_cont.destinationAlternativo = "Movimentacao";
				_cont.executeLocal("MovTrackAlterar", [tm], onAfterUpdate,this, "dataSet",true);	
		}
		
		private function onAfterUpdate(e:ResultEvent):void{
			btnNovo.enabled 		= true;
			btnSalvar.enabled 		= false;
			btnCancelar.enabled 	= true;
			btnBuscar.enabled 		= true;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text = "Alteração Efetuada Com Sucesso!";
			
			//lista depois da alteração
			_cont.destinationAlternativo = "Movimentacao";
			_cont.executeLocal("MovTrackListar",[],onAfterListar,this,"dataSet",true);
		}
			
		
		//Função listar itens do banco	
		private function onlist():void{
			CanvasForm.visible          = false;
			CanvasForm.includeInLayout  = false;
			
			CanvasDg.visible          	= true;
			CanvasDg.includeInLayout  	= true;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text = "";
			
			btnNovo.enabled 			= true;
			btnSalvar.enabled 			= false;
			btnCancelar.enabled 		= false;
			btnBuscar.enabled 			= false;
			
			//Executa busca no Banco
			_cont.destinationAlternativo = "Movimentacao";
			_cont.executeLocal("MovTrackListar",[],onAfterListar,this,"dataSet",true);
		}
			
		private function onAfterListar(e:ResultEvent):void{
			dataSet = e.result as ArrayCollection;
		}
			
		private function onEditar(e:Event):void {
			if(dataGrid.selectedItem != null){
				lbInfo.setStyle("color" , "Black");
				lbInfo.text = "";
				
				CanvasForm.enabled 			= true;
				CanvasForm.visible          = true;
				CanvasForm.includeInLayout  = true; 
			
				CanvasDg.visible          	= false;
				CanvasDg.includeInLayout  	= false;
				
				btnNovo.enabled 			= false;
				btnSalvar.enabled 			= true;
				btnCancelar.enabled 		= true;
				btnBuscar.enabled 			= false;
			
				//preenche os campos com os dados vindos do datagrid
				tiId.text = dataGrid.selectedItem.id_track;
				tiStatusTarefa.text = dataGrid.selectedItem.status_track;
				tiTituloTarefa.text = dataGrid.selectedItem.titulo_track;
				taTarefa.text = dataGrid.selectedItem.track;
				cmbPrioridade.selecionarItemDoCombo(dataGrid.selectedItem.id_prioridade);
				cmbTarefa.selecionarItemDoCombo(dataGrid.selectedItem.id_tarefa);
				cmbUsuarioDestino.selecionarItemDoCombo(dataGrid.selectedItem.id_usuario_destino);
			}else{
				lbInfo.setStyle("color" , "Red");
				lbInfo.text = "Favor Selecionar Um Registro Para Editar";
			}
		}
			
			
			
		private function onExcluir(e:Event):void {
			if(dataGrid.selectedItem != null){
				lbInfo.setStyle("color" , "Black");
				lbInfo.text = "";
				
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";
				Alert.show("Confirma exclusão definitiva?","Exclusão", Alert.YES | Alert.NO ,this, resultExcluir);
			}else{
				lbInfo.setStyle("color" , "Red");
				lbInfo.text = "Favor Selecionar Um Registro Para Excluir";
			}
		}
		
		public function resultExcluir(event:CloseEvent):void{
			if (event.detail == Alert.YES){
				//executa exclusao no banco
				_cont.destinationAlternativo = "Movimentacao";
				_cont.executeLocal("MovTrackExcluir",[dataGrid.selectedItem],onAfterExcluir,this,"dataSet",true);
			}
		}
			
		private function onAfterExcluir(e:ResultEvent):void{
			//lista depois de excluir
			_cont.destinationAlternativo = "Movimentacao";
			_cont.executeLocal("MovTrackListar",[],onAfterListar,this,"dataSet",true);
		}
		
		//Função novo registro
		private function onClickNovo():void {
			clearForm(CanvasForm);
			dataGrid.selectedIndex      = -1;
			
			CanvasForm.enabled          = true;
			CanvasForm.visible          = true;
			CanvasForm.includeInLayout  = true;
			
			CanvasDg.visible            = false;
			CanvasDg.includeInLayout    = false;
			
			lbInfo.setStyle("color" , "Black");
			lbInfo.text                 = "";
			
			btnNovo.enabled 			= false;
			btnSalvar.enabled 			= true;
			btnCancelar.enabled 		= true;
			btnBuscar.enabled 			= false;
		}
		
		private function onClickSave():void{
			validate(CanvasForm);
			/* validate(CanvasForm2);
			validate(CanvasForm3); */
		}
		
		private function onClickCancel():void{
			clearForm(CanvasForm);
		}
			
		]]>
	</mx:Script>
	<mx:DateFormatter id="_dfFormatador" formatString="DD/MM/YYYY J:NN:SS"  />
	
	<mx:HBox height="64" left="10" right="10" top="10">
		<mx:Button id="btnNovo" label="Novo" height="100%" width="75" click="onClickNovo()" labelPlacement="bottom">
			<mx:icon>@Embed(source='../../../../assets/Icons/Icons 32X32/new.png')</mx:icon>
		</mx:Button>
		<mx:Button id="btnSalvar" label="Salvar" height="100%" click="onClickSave()" icon="@Embed(source='../../../../assets/Icons/Icons 32X32/accept.png')" labelPlacement="bottom" width="75"/>
		<mx:Button id="btnCancelar" label="Cancelar" height="100%" click="onClickCancel()" labelPlacement="bottom" width="75">
			<mx:icon>@Embed(source='../../../../assets/Icons/Icons 32X32/cancel.png')</mx:icon>
		</mx:Button>
		<mx:Button id="btnBuscar" label="Buscar" height="100%" click="onlist()" labelPlacement="bottom" width="75">
			<mx:icon>@Embed(source='../../../../assets/Icons/Icons 32X32/search.png')</mx:icon>
		</mx:Button>
	</mx:HBox>
	<mx:Canvas id="CanvasDg" x="0" y="73" width="100%" height="310" visible="false" top="82" left="0" bottom="29">
		<mx:DataGrid id="dataGrid" dataProvider="{this.dataSet}" y="0" height="100%" right="10" left="10">
			<mx:columns>
				<mx:DataGridColumn headerText="ID" dataField="id_track" width="50"/>
				<mx:DataGridColumn headerText="Titulo" dataField="titulo_track" width="150"/>
				<mx:DataGridColumn headerText="Tarefa" dataField="tarefa"/>
				<mx:DataGridColumn headerText="Usuario Destino" dataField="usuario_destino"/>
				<mx:DataGridColumn headerText="Status Track" dataField="status_track"/>
				<mx:DataGridColumn headerText="Prioridade" width="100" editable="false" itemRenderer="br.com.jfrootmaster.itemrenderers.IrPrioridade"/>
				<mx:DataGridColumn headerText="##" width="35" itemRenderer="br.com.jfrootmaster.itemrenderers.IrEditar"/>
				<mx:DataGridColumn headerText="##" width="35" itemRenderer="br.com.jfrootmaster.itemrenderers.IrExcluir"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:Canvas height="21" right="10" left="10" borderStyle="solid" borderColor="#000000" cornerRadius="6" bottom="5">
		<mx:Label id="lbInfo" text="Info" textAlign="center" fontWeight="bold" fontSize="11" height="100%" bottom="0" left="0" right="0"/>
	</mx:Canvas>
		<mx:Canvas label="Dados Funcionario" backgroundAlpha="1.0" alpha="1.0" id="CanvasForm" right="10" left="10" top="82" bottom="29">
			<ns1:TextImputCustom x="10" y="28" width="89" editable="false" id="tiId"/>
			<ns1:TextAreaCustom x="10" y="123" width="564" id="taTarefa" Requerido="true" height="99"/>
			<mx:Label x="10" y="10" text="ID" fontWeight="bold" color="#FFFFFF"/>
			<mx:Label x="10" y="106" text="Tarefa" fontWeight="bold" color="#FFFFFF"/>
			<mx:Label x="10" y="230" text="Prioridade" fontWeight="bold" color="#FFFFFF"/>
			<mx:Label x="328" y="230" text="Usuario Destino" fontWeight="bold" color="#FFFFFF"/>
			<ns1:ComBoxCustom x="10" y="247" width="310" id="cmbPrioridade" dataProvider="{CadPrioridade}" labelField="nome" ComboKey="id_prioridade"></ns1:ComBoxCustom>
			<ns1:ComBoxCustom x="328" y="247" width="310" id="cmbUsuarioDestino" dataProvider="{CadUser}" labelField="nome" ComboKey="id_usuario"></ns1:ComBoxCustom>
			<ns1:TextImputCustom x="10" y="76" width="564" id="tiTituloTarefa" Requerido="true"/>
			<mx:Label x="12" y="58" text="Titulo Tarefa" fontWeight="bold" color="#FFFFFF"/>
			<mx:Label x="107" y="11" text="Tarefa" fontWeight="bold" color="#FFFFFF"/>
			<ns1:ComBoxCustom x="107" y="28" width="467" id="cmbTarefa" dataProvider="{CadTarefa}" labelField="tarefa" ComboKey="id_tarefa"></ns1:ComBoxCustom>
			<ns1:TextImputCustom x="10" y="294" width="310" id="tiStatusTarefa" Requerido="true" borderStyle="solid" alpha="1.0" cornerRadius="5" borderThickness="1" borderColor="#000000" backgroundAlpha="0.0"/>
			<mx:Label x="12" y="279" text="Status Tarefa" fontWeight="bold" color="#FFFFFF"/>
		</mx:Canvas>
	
</mx:Canvas>
